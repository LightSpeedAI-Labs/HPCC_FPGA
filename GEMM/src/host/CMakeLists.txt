
include_directories(../../../extern/cxxopts/include ../../../shared/)
include_directories(${CMAKE_BINARY_DIR}/src/common)
include_directories(${CMAKE_SOURCE_DIR}/../shared/setup .)

set(HOST_SOURCE execution_cannon.cpp main.cpp common_benchmark_io_implementation.cpp ../../../shared/setup/fpga_setup.cpp gemm_functionality.cpp)

find_package(BLAS)

if (NOT BLAS_FOUND)
    message(WARNING "No BLAS Library found. Slow reference implementation will be used for verification!")
endif()

if (INTELFPGAOPENCL_FOUND)
    include_directories(${IntelFPGAOpenCL_INCLUDE_DIRS})
    add_executable(GEMM_intel ${HOST_SOURCE})
    target_link_libraries(GEMM_intel ${IntelFPGAOpenCL_LIBRARIES})
    target_compile_definitions(GEMM_intel PRIVATE -DINTEL_FPGA)
    if (BLAS_FOUND)
        target_compile_definitions(GEMM_intel PRIVATE -D_USE_BLAS_)
        target_link_libraries(GEMM_intel ${BLAS_LIBRARIES})
        target_link_options(GEMM_intel PRIVATE ${BLAS_LINKER_FLAGS})
    endif()
endif()

if (Vitis_FOUND)
    include_directories(${Vitis_INCLUDE_DIRS})
    add_executable(GEMM_xilinx ${HOST_SOURCE})
    target_link_libraries(GEMM_xilinx ${Vitis_LIBRARIES})
    target_compile_definitions(GEMM_xilinx PRIVATE -DXILINX_FPGA)
    if (BLAS_FOUND)
        target_compile_definitions(GEMM_xilinx PRIVATE -D_USE_BLAS_)
        target_link_libraries(GEMM_xilinx ${BLAS_LIBRARIES})
        target_link_options(GEMM_xilinx PRIVATE ${BLAS_LINKER_FLAGS})
    endif()
endif()
